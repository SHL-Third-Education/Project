// -------------------------------------------------------------
// 
// File Name: /tmp/tpc580e839_93cc_49a5_b11d_c2360b776e0b/hdlcoder_dspprogfir/Programmable_FIR_via_Registers_tb.v
// Created: 2018-12-14 02:36:25
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// filter_out                    ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Programmable_FIR_via_Registers_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Programmable_FIR_via_Registers_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire filter_out_done;  // ufix1
  wire rdEnb;
  wire filter_out_done_enb;  // ufix1
  reg [8:0] filter_out_addr;  // ufix9
  wire filter_out_active;  // ufix1
  reg [8:0] Host_Behavioral_Model_out2_addr;  // ufix9
  wire [8:0] filter_input_addr_delay_1;  // ufix9
  reg  tb_enb_delay;
  reg signed [31:0] fp_filter_in;  // sfix32
  reg signed [13:0] rawData_filter_in;  // sfix14_En13
  reg signed [31:0] status_filter_in;  // sfix32
  reg signed [13:0] holdData_filter_in;  // sfix14_En13
  reg signed [13:0] filter_in_offset;  // sfix14_En13
  wire signed [13:0] filter_in;  // sfix14_En13
  wire [8:0] write_done_addr_delay_1;  // ufix9
  reg signed [31:0] fp_write_done;  // sfix32
  reg  rawData_write_done;
  reg signed [31:0] status_write_done;  // sfix32
  reg  holdData_write_done;
  reg  write_done_offset;
  wire write_done;
  wire [8:0] write_enable_addr_delay_1;  // ufix9
  reg signed [31:0] fp_write_enable;  // sfix32
  reg  rawData_write_enable;
  reg signed [31:0] status_write_enable;  // sfix32
  reg  holdData_write_enable;
  reg  write_enable_offset;
  wire write_enable;
  wire [8:0] Host_Behavioral_Model_out3_addr_delay_1;  // ufix9
  reg signed [31:0] fp_write_address;  // sfix32
  reg [7:0] rawData_write_address;  // uint8
  reg signed [31:0] status_write_address;  // sfix32
  reg [7:0] holdData_write_address;  // uint8
  reg [7:0] write_address_offset;  // uint8
  wire [7:0] write_address;  // uint8
  wire Host_Behavioral_Model_out2_active;  // ufix1
  wire Host_Behavioral_Model_out2_enb;  // ufix1
  wire [8:0] Host_Behavioral_Model_out2_addr_delay_1;  // ufix9
  reg signed [31:0] fp_coeffs_in;  // sfix32
  reg signed [13:0] rawData_coeffs_in;  // sfix14_En13
  reg signed [31:0] status_coeffs_in;  // sfix32
  reg signed [13:0] holdData_coeffs_in;  // sfix14_En13
  reg signed [13:0] coeffs_in_offset;  // sfix14_En13
  wire signed [13:0] coeffs_in;  // sfix14_En13
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire signed [14:0] filter_out;  // sfix15_En13
  wire filter_out_enb;  // ufix1
  wire filter_out_lastAddr;  // ufix1
  wire [8:0] filter_out_addr_delay_1;  // ufix9
  reg signed [31:0] fp_filter_out_expected;  // sfix32
  reg signed [14:0] filter_out_expected;  // sfix15_En13
  reg signed [31:0] status_filter_out_expected;  // sfix32
  wire signed [14:0] filter_out_ref;  // sfix15_En13
  reg  filter_out_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign filter_out_done_enb = filter_out_done & rdEnb;



  assign filter_out_active = filter_out_addr != 9'b111110100;



  assign #1 filter_input_addr_delay_1 = Host_Behavioral_Model_out2_addr;

  // Data source for filter_in
  initial
    begin : filter_in_fileread
      fp_filter_in = $fopen("filter_in.dat", "r");
      status_filter_in = $rewind(fp_filter_in);
    end

  always @(filter_input_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_filter_in <= 14'bx;
      end
      else if (rdEnb == 1) begin
        status_filter_in = $fscanf(fp_filter_in, "%h", rawData_filter_in);
      end
    end

  // holdData reg for filter_input
  always @(posedge clk or posedge reset)
    begin : stimuli_filter_input
      if (reset) begin
        holdData_filter_in <= 14'bx;
      end
      else begin
        holdData_filter_in <= rawData_filter_in;
      end
    end

  always @(rawData_filter_in or rdEnb)
    begin : stimuli_filter_input_1
      if (rdEnb == 1'b0) begin
        filter_in_offset <= holdData_filter_in;
      end
      else begin
        filter_in_offset <= rawData_filter_in;
      end
    end

  assign #2 filter_in = filter_in_offset;

  assign #1 write_done_addr_delay_1 = Host_Behavioral_Model_out2_addr;

  // Data source for write_done
  initial
    begin : write_done_fileread
      fp_write_done = $fopen("write_done.dat", "r");
      status_write_done = $rewind(fp_write_done);
    end

  always @(write_done_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_write_done <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_write_done = $fscanf(fp_write_done, "%h", rawData_write_done);
      end
    end

  // holdData reg for write_done
  always @(posedge clk or posedge reset)
    begin : stimuli_write_done
      if (reset) begin
        holdData_write_done <= 1'bx;
      end
      else begin
        holdData_write_done <= rawData_write_done;
      end
    end

  always @(rawData_write_done or rdEnb)
    begin : stimuli_write_done_1
      if (rdEnb == 1'b0) begin
        write_done_offset <= holdData_write_done;
      end
      else begin
        write_done_offset <= rawData_write_done;
      end
    end

  assign #2 write_done = write_done_offset;

  assign #1 write_enable_addr_delay_1 = Host_Behavioral_Model_out2_addr;

  // Data source for write_enable
  initial
    begin : write_enable_fileread
      fp_write_enable = $fopen("write_enable.dat", "r");
      status_write_enable = $rewind(fp_write_enable);
    end

  always @(write_enable_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_write_enable <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_write_enable = $fscanf(fp_write_enable, "%h", rawData_write_enable);
      end
    end

  // holdData reg for write_enable
  always @(posedge clk or posedge reset)
    begin : stimuli_write_enable
      if (reset) begin
        holdData_write_enable <= 1'bx;
      end
      else begin
        holdData_write_enable <= rawData_write_enable;
      end
    end

  always @(rawData_write_enable or rdEnb)
    begin : stimuli_write_enable_1
      if (rdEnb == 1'b0) begin
        write_enable_offset <= holdData_write_enable;
      end
      else begin
        write_enable_offset <= rawData_write_enable;
      end
    end

  assign #2 write_enable = write_enable_offset;

  assign #1 Host_Behavioral_Model_out3_addr_delay_1 = Host_Behavioral_Model_out2_addr;

  // Data source for write_address
  initial
    begin : write_address_fileread
      fp_write_address = $fopen("write_address.dat", "r");
      status_write_address = $rewind(fp_write_address);
    end

  always @(Host_Behavioral_Model_out3_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_write_address <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_write_address = $fscanf(fp_write_address, "%h", rawData_write_address);
      end
    end

  // holdData reg for Host_Behavioral_Model_out3
  always @(posedge clk or posedge reset)
    begin : stimuli_Host_Behavioral_Model_out3
      if (reset) begin
        holdData_write_address <= 8'bx;
      end
      else begin
        holdData_write_address <= rawData_write_address;
      end
    end

  always @(rawData_write_address or rdEnb)
    begin : stimuli_Host_Behavioral_Model_out3_1
      if (rdEnb == 1'b0) begin
        write_address_offset <= holdData_write_address;
      end
      else begin
        write_address_offset <= rawData_write_address;
      end
    end

  assign #2 write_address = write_address_offset;

  assign Host_Behavioral_Model_out2_active = Host_Behavioral_Model_out2_addr != 9'b111110100;



  assign Host_Behavioral_Model_out2_enb = Host_Behavioral_Model_out2_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 500
  always @(posedge clk or posedge reset)
    begin : HostBehavioralModel_process
      if (reset == 1'b1) begin
        Host_Behavioral_Model_out2_addr <= 9'b000000000;
      end
      else begin
        if (Host_Behavioral_Model_out2_enb) begin
          if (Host_Behavioral_Model_out2_addr >= 9'b111110100) begin
            Host_Behavioral_Model_out2_addr <= 9'b000000000;
          end
          else begin
            Host_Behavioral_Model_out2_addr <= Host_Behavioral_Model_out2_addr + 9'b000000001;
          end
        end
      end
    end



  assign #1 Host_Behavioral_Model_out2_addr_delay_1 = Host_Behavioral_Model_out2_addr;

  // Data source for coeffs_in
  initial
    begin : coeffs_in_fileread
      fp_coeffs_in = $fopen("coeffs_in.dat", "r");
      status_coeffs_in = $rewind(fp_coeffs_in);
    end

  always @(Host_Behavioral_Model_out2_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_coeffs_in <= 14'bx;
      end
      else if (rdEnb == 1) begin
        status_coeffs_in = $fscanf(fp_coeffs_in, "%h", rawData_coeffs_in);
      end
    end

  // holdData reg for Host_Behavioral_Model_out2
  always @(posedge clk or posedge reset)
    begin : stimuli_Host_Behavioral_Model_out2
      if (reset) begin
        holdData_coeffs_in <= 14'bx;
      end
      else begin
        holdData_coeffs_in <= rawData_coeffs_in;
      end
    end

  always @(rawData_coeffs_in or rdEnb)
    begin : stimuli_Host_Behavioral_Model_out2_1
      if (rdEnb == 1'b0) begin
        coeffs_in_offset <= holdData_coeffs_in;
      end
      else begin
        coeffs_in_offset <= rawData_coeffs_in;
      end
    end

  assign #2 coeffs_in = coeffs_in_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  Programmable_FIR_via_Registers u_Programmable_FIR_via_Registers (.clk(clk),
                                                                   .reset(reset),
                                                                   .clk_enable(clk_enable),
                                                                   .coeffs_in(coeffs_in),  // sfix14_En13
                                                                   .write_address(write_address),  // uint8
                                                                   .write_enable(write_enable),
                                                                   .write_done(write_done),
                                                                   .filter_in(filter_in),  // sfix14_En13
                                                                   .ce_out(ce_out),
                                                                   .filter_out(filter_out)  // sfix15_En13
                                                                   );

  assign filter_out_enb = ce_out & filter_out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 500
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        filter_out_addr <= 9'b000000000;
      end
      else begin
        if (filter_out_enb) begin
          if (filter_out_addr >= 9'b111110100) begin
            filter_out_addr <= 9'b000000000;
          end
          else begin
            filter_out_addr <= filter_out_addr + 9'b000000001;
          end
        end
      end
    end



  assign filter_out_lastAddr = filter_out_addr >= 9'b111110100;



  assign filter_out_done = filter_out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (filter_out_done_enb) begin
          check1_done <= filter_out_done;
        end
      end
    end

  assign #1 filter_out_addr_delay_1 = filter_out_addr;

  // Data source for filter_out_expected
  initial
    begin : filter_out_expected_fileread
      fp_filter_out_expected = $fopen("filter_out_expected.dat", "r");
      status_filter_out_expected = $rewind(fp_filter_out_expected);
    end

  always @(filter_out_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filter_out_expected <= 15'bx;
      end
      else if (ce_out == 1) begin
        status_filter_out_expected = $fscanf(fp_filter_out_expected, "%h", filter_out_expected);
      end
    end

  assign filter_out_ref = filter_out_expected;

  always @(posedge clk or posedge reset)
    begin : filter_out_checker
      if (reset == 1'b1) begin
        filter_out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filter_out !== filter_out_ref) begin
          filter_out_testFailure <= 1'b1;
          $display("ERROR in filter_out at time %t : Expected '%h' Actual '%h'", $time, filter_out_ref, filter_out);
        end
      end
    end

  assign testFailure = filter_out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Programmable_FIR_via_Registers_tb

